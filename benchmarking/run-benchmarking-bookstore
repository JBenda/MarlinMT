#!/bin/bash 

# if [ ! "$#" == "5" ]
# then
#   echo "Usage ./extract_scaling.sh <max-n-cores> <crunch-sigma-percent> <lazy-unpack> <trigger-unpacking> <input-file>"
#   echo "Example:  ./extract_scaling.sh 40 0.1 true true /path/to/lcio-file.slcio"
#   exit 1
# fi

function printUsage() {
  echo "Usage:"
  echo "run-benchmarking-bookstore [options] --inputfile <slcio-file>"
  echo ""
  echo "Run MarlinMT for multi-core benchmarking"
  echo ""
  echo "Options:"
  echo "  --mincores <int>           The start number of cores [default=2]"
  echo "  --maxcores <int>           The end number of cores [default=2]"
  echo "  --mincrunch <int>          The start crunch time (ms) [default=500]"
  echo "  --maxcrunch <int>          The end crunch time (ms) [default=1000]"
  echo "  --crunchstep <int>         The step in crunch time numbers [default=500]"
  echo "  --sigmacrunch <float>      Introduce an event-by-event gaussian random"
  echo "                             fluctuation in the crunch time [default=0]"
  echo "  --inputfile <slcio-file>   The LCIO input file. Mandatory parameter !"
  echo "  --lazy                     Whether use option LazyUnpack for LCIO reading [default=false]"
  echo "  --trigger                  Whether to trigger the event unpacking in worker threads [default=false]"
  echo "  -h --help                  Print help and exit"
  echo ""
}


if [ -z "$MARLIN_DIR" ]
then
  echo "MARLIN_DIR not set. Please setup your environment!"
  exit 1
fi

if [ -z "$LCIO_DIR" ]
then
  echo "LCIO_DIR not set. Please setup your environment!"
  exit 1
fi

OPTS=`getopt -o h -l mincores:,maxcores:,mincrunch:,maxcrunch:,crunchstep:,sigmacrunch:,inputfile:,histsigmapercent:,nbins:,nhistsmin:,nhistsmax:,nhistsstep:,nfills:,memorylayout:,steeringfile:,lazy,trigger,native,help -n 'parse-options' -- "$@"`
eval set -- "$OPTS"

# general configuration
mincores=2
maxcores=3
lazyUnpack="false"
triggerUnpacking="false"
inputfile=""
steeringfile=${MARLIN_DIR}/benchmarking/hist_filling.xml

# cpu_crunch configuration
mincrunch=50
maxcrunch=100
crunchstep=50
sigmapercent=0

# histogram processor configuration
nbins=1000
nhistsmin=20
nhistsmax=40
nhistsstep=20
nfills=1000
memorylayout="Copy"
native="false"
	

while true; do
  case "$1" in
	# general configuration
    --mincores ) mincores=$2; shift; shift ;;
    --maxcores ) maxcores=$2; shift; shift ;;
    --inputfile ) inputfile=$2; shift; shift ;;
    --lazy ) lazyUnpack="true"; shift ;;
    --trigger ) triggerUnpacking="true"; shift ;;
		--steeringfile ) steeringfile=$2; shift; shift;;
	# cpu crunch configuration
    --mincrunch ) mincrunch=$2; shift; shift ;;
    --maxcrunch ) maxcrunch=$2; shift; shift ;;
    --crunchstep ) crunchstep=$2; shift; shift ;;
    --sigmacrunch ) sigmacrunch=$2; shift; shift ;;
	# histogram processor configuration
		--nbins ) nbins=$2; shift; shift ;;
		--nhistsmin ) nhistsmin=$2; shift; shift ;;
		--nhistsmax ) nhistsmax=$2; shift; shift ;;
		--nhistsstep ) nhistsstep=$2; shift; shift ;;
		--nfills ) nfills=$2; shift; shift ;;
		--memorylayout ) memorylayout=$2; shift; shift ;;
		--native ) native="true"; shift ;;
	# other inputs
    -h | --help )  printUsage; exit 0 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done


if [ "$inputfile" == "" ]
then
  echo "ERROR: --inputfile argument is mandatory"
  printUsage
  exit 1
fi

cores=`seq ${mincores} ${maxcores} | tr '\n' ' '`
crunchtimes=`seq ${mincrunch} ${crunchstep} ${maxcrunch} | tr '\n' ' '`
nhists=`seq ${nhistsmin} ${nhistsstep} ${nhistsmax} | tr '\n' ' '`

lazyUnpackStr=""
triggerUnpackingStr=""

if [ "${lazyUnpack}" == "true" ]
then
  lazyUnpackStr="lazy"
else
  lazyUnpackStr="nolazy"
fi

if [ "${triggerUnpacking}" == "true" ]
then
  triggerUnpackingStr="trig"
else
  triggerUnpackingStr="notrig"
fi

output="MarlinMTBenchmarking_Lazy.${lazyUnpackStr}_Trigger.${triggerUnpackingStr}_Sigma.${sigmapercent}_MemoryLayout.${memorylayout}_Native.${native}.txt"

if [ -f ${output} ]
then
  rm ${output}
fi

echo "Running with following settings:"
echo "  - n cores: ${cores}"
echo "  - crunch times: ${crunchtimes}"
echo "  - crunch sigma percentage: $sigmapercent"
echo "  - lazy unpacking ? $lazyUnpack"
echo "  - trigger unpacking ? $triggerUnpacking"
echo "  - LCIO input file: $inputfile"
echo "  - Marlin steering file: $steeringfile"
echo "  - Benchmark output file: $output"

# load the file in the cache for next
echo "Loading input file into cache: ${inputfile}"
anajob ${inputfile} >> /dev/null

if [[ "$native" == "true" ]] && [[ $memorylayout != "Shared" ]]; then
	echo "ERROR copied memory layout is native not possible!"
	exit 1
fi

echo "Start benchmarking ..."
echo "concurrency,crunch Time,crunch Sigma,n Histograms,n Fills,n bins,native,memory layout,serial time,parallel time,scaling factor" >> ${output}
for c in ${cores}
do
  for cr in ${crunchtimes}
  do
		crunchSigma=`echo "(${cr}*${sigmapercent})" | bc`
		for nh  in ${nhists}
		do
			echo "Running MarlinMT with:"
			echo "  general:"
			echo "  -- N cores:            ${c}"
			echo "  -- Lazy unpacking:     ${lazyUnpack}"
			echo "  -- Trigger unpacking:  ${triggerUnpacking}"
			echo "  cpu_crunch:"
			echo "  -- Crunch time:        ${cr}"
			echo "  -- Crunch sigma:       ${crunchSigma}"
			echo "  histogram filling:"
			echo "  -- number histograms:  ${nh}"
			echo "  -- number bins:        ${nbins}"
			echo "  -- number fills:       ${nfills}"
			MarlinMT \
			${steeringfile} \
			--constant.TriggerUnpacking="${triggerUnpacking}" \
			--datasource.LCIOInputFiles="${inputfile}" \
			--datasource.LazyUnpack="${lazyUnpack}" \
			--CPUCrunch.CrunchTime=${cr} \
			--CPUCrunch.CrunchSigma=${crunchSigma} \
			--bookstore.DefaultMemoryLayout=${memorylayout} \
			--HistFilling.NBins=${nbins} \
			--HistFilling.NHists=${nh} \
			--HistFilling.NFills=${nfills} \
			--HistFillingNative.NBins=${nbins} \
			--HistFillingNative.NHists=${nh} \
			--HistFillingNative.NFills=${nfills} \
			--constant.RunNative=${native} \
			--global.Concurrency=${c} > scaling_temp_$$.log 
			if [ $? -ne 0 ]; then
				echo "MarlinMT failed!, stop benchmarks!"
				exit 1
			fi
			serial=$( cat scaling_temp_$$.log | grep serial | awk '{print $7}' )
			parallel=$( cat scaling_temp_$$.log |  grep serial | awk '{print $9}' )
			scaling=$( cat scaling_temp_$$.log | grep serial| awk '{print $11}' )
			echo "Result: "
			echo "  serial Time:   ${serial}"
			echo "  parallel Time: ${parallel}"
			echo "  scaling:       ${scaling}"
			echo "${c},${cr},${crunchSigma},${nh},${nfills},${nbins},${native},${memorylayout},${serial},${parallel},${scaling}" >> ${output}
			echo ""
		done
  done
done
